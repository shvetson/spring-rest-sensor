openapi: 3.0.3
info:
  title: Sensor
  description: | 
    API сервис - погодный датчик
    - Датчик фиксирует температуру / определяет наличие дождя и передает данные на сервер.
    - Сервис принимает данные от сенсора / сохраняет в базу данных и предоставляет доступ к данным через API.
  contact:
    email: shvetson@gmail.com
  license:
    name: Apache 2.0
    url: https://www.apache.org/licenses/LICENSE-2.0.html
  version: 1.0.11
servers:
  - url: https://localhost/api/v1
tags:
  - name: sensors
    description: Регистрация сенсора, добавление измерений от сенсора
  - name: measurements
    description: Получение всех измерений
paths:
  /sensors/registration:
    post:
      tags:
        - sensors
      summary: Регистрация нового сенсора
      description: Регистрация нового сенсора
      operationId: create
      requestBody:
        description: Create a new sensor
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SensorCreateRequest'
        required: true
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SensorCreateResponse'
        405:
          description: Invalid input

  /sensors/{id}:
    get:
      tags:
        - sensors
      summary: Получение инфо о сенсоре
      description: Получение информации об одном сенсоре
      operationId: read
      parameters:
        - name: id
          in: path
          description: id of sensor to return
          required: true
          schema:
            type: integer
            format: int64
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Sensor'
        400:
          description: Invalid ID supplied
        404:
          description: Sensor not found

components:
  schemas:
    IRequest:
      type: object
      description: Базовый интерфейс для всех запросов
      properties:
        requestType:
          type: string
          description: Поле-дискриминатор для вычисления типа запроса
          example: create
        requestId:
          type: string
          description: Идентификатор запроса для отладки
      discriminator:
        propertyName: requestType
        mapping:
          create: '#/components/schemas/SensorCreateRequest'

    Error:
      type: object
      properties:
        code:
          type: string
        group:
          type: string
        field:
          type: string
        message:
          type: string

    ResponseResult:
      type: string
      enum:
        - success
        - error

    IResponse:
      type: object
      description: Базовый интерфейс для всех ответов
      properties:
        responseType:
          type: string
          description: Поле-дискриминатор для вычисления типа запроса
          example: create
        requestId:
          type: string
          description: Идентификатор запроса для отладки
        result:
          $ref: '#/components/schemas/ResponseResult'
        errors:
          type: array
          items:
            $ref: '#/components/schemas/Error'

      discriminator:
        propertyName: responseType
        mapping:
          create: '#/components/schemas/SensorCreateResponse'

    SensorId:
      type: integer
      description: Идентификатор сенсора

    MeasurementId:
      type: integer
      description: Идентификатор замера

    Sensor:
      type: object
      description: Объект описывает свойства для create
      properties:
        id:
          type: integer
          format: int64
          example: 10
        name:
          type: string
          description: Наименование сенсора
          example: Sensor 1
        createAt:
          type: integer
          format: int64
          description: Время создания записи о сенсоре (регистрации)
        updateAt:
          type: integer
          format: int64
          description: Время обновления данных о сенсоре
        createWho:
          type: string
          description: Лицо, которое зарегистрировало сенсор
          example: ADMIN

    SensorCreateObject:
      allOf:
        - $ref: '#/components/schemas/Sensor'

    SensorCreateRequest:
      allOf:
        - $ref: '#/components/schemas/IRequest'
        - $ref: '#/components/schemas/SensorRequestDebug'
        - type: object
          properties:
            sensor:
              $ref: '#/components/schemas/SensorCreateObject'

    SensorReadObject:
      allOf:
        - type: object
          properties:
            id:
              $ref: '#/components/schemas/SensorId'

    SensorReadRequest:
      allOf:
        - $ref: '#/components/schemas/IRequest'
        - $ref: '#/components/schemas/SensorRequestDebug'
        - type: object
          properties:
            sensor:
              $ref: '#/components/schemas/SensorReadObject'

    SensorResponseObject:
      allOf:
        - $ref: '#/components/schemas/Sensor'
        - type: object
          description: Объект, который возвращается в ответе бэкенда
          properties:
            id:
              $ref: '#/components/schemas/SensorId'
            measurementId:
              $ref: '#/components/schemas/MeasurementId'
            permissions:
              type: array
              uniqueItems: true
              items:
                $ref: '#/components/schemas/SensorPermissions'

    SensorPermissions:
      type: string
      description: Доступы для клиента для операций над сенсором
      enum:
        - read
        - update
        - delete

    SensorResponseSingle:
      allOf:
        - type: object
          description: Ответ с одним объектом - сенсором
          properties:
            sensor:
              $ref: '#/components/schemas/SensorResponseObject'

    SensorResponseMulti:
      allOf:
        - type: object
          description: Список найденных объектов
          properties:
            sensors:
              type: array
              items:
                $ref: '#/components/schemas/SensorResponseObject'

    SensorCreateResponse:
      allOf:
        - $ref: '#/components/schemas/IResponse'
        - $ref: '#/components/schemas/SensorResponseSingle'

    SensorReadResponse:
      allOf:
        - $ref: '#/components/schemas/IResponse'
        - $ref: '#/components/schemas/SensorResponseSingle'

# STUBS ==========================================

    SensorRequestDebugMode:
      type: string
      enum:
        - prod
        - test
        - stub

    SensorDebug:
      type: object
      properties:
        mode:
          $ref: '#/components/schemas/SensorRequestDebugMode'
        stub:
          $ref: '#/components/schemas/SensorRequestDebugStubs'

    SensorRequestDebug:
      type: object
      properties:
        debug:
          $ref: '#/components/schemas/SensorDebug'

    SensorRequestDebugStubs:
      type: string
      description: Перечисление всех стабов
      enum:
        - success
        - notFound
        - badId
        - badName
        - cannotDelete
        - badSearchString